# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015 by Ecpy Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)


from enaml.layout.api import hbox, vbox, align
from enaml.widgets.api import (Container, Label, GroupBox, SplitItem,
                               ObjectCombo, Splitter)

from ecpy.utils.widgets.qt_completers import QtLineCompleter
from ...utils.entry_eval import EVALUATER_TOOLTIP


enamldef AbstractShapeView(SplitItem):
    """ Abstract class from which all ShapeViews must inherit.

    """
    attr item

enamldef ModulationView(AbstractShapeView):
    """ View for the modulation of an analogical pulse.

    """
    attr modulation

    GroupBox:
        title = 'Modulation'
        padding = 0
        constraints << [hbox(*self.widgets()),
                        align('v_center', kind_lab, kind_val),
                        align('v_center', kind_lab, spl)]

        Label: kind_lab:
            text = 'Kind'
        ObjectCombo: kind_val:
            items = list(modulation.get_member('kind').items)
            selected := modulation.kind

        Splitter: spl:
            SplitItem:
                Container:
                    constraints << [hbox(freq_lab, freq_val, freq_un),
                                    align('v_center', freq_lab, freq_val)]
                    Label: freq_lab:
                        text = 'Frequency'
                    QtLineCompleter: freq_val:
                        hug_width = 'ignore'
                        text := modulation.frequency
                        entries_updater << item.parent.get_bindable_vars
                        tool_tip = EVALUATER_TOOLTIP
                    ObjectCombo: freq_un:
                        items = list(modulation.get_member('frequency_unit').items)
                        selected := modulation.frequency_unit
            SplitItem:
                Container:
                    constraints << [hbox(phase_lab, phase_val, phase_un),
                                    align('v_center', phase_lab, phase_val)]
                    Label: phase_lab:
                        text = 'Phase'
                    QtLineCompleter: phase_val:
                        hug_width = 'ignore'
                        text := modulation.phase
                        entries_updater << item.parent.get_bindable_vars
                        tool_tip = EVALUATER_TOOLTIP
                    ObjectCombo: phase_un:
                        items = list(modulation.get_member('phase_unit').items)
                        selected := modulation.phase_unit


