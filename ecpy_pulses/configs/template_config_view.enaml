# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2016 by EcpyPulses Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Declaration for the view used by TemplateConfig.

"""
from __future__ import (division, unicode_literals, print_function,
                        absolute_import)

from inspect import cleandoc
from textwrap import fill

from enaml.core.api import Conditional
from enaml.widgets.api import (MultilineField, Field, GroupBox, Form, Label,
                               CheckBox, RadioButton, PushButton)
from enaml.layout.api import hbox, vbox, spacer

from .base_config_views import AbstractConfigView
from ..contexts.views.template_context_view import MappingEditor


enamldef TemplateConfigView(AbstractConfigView): main:
    """ View allowing the user to select how to insert the template.

    """
    Label:
        text = 'Sequence name'
    Field:
        text >> model.template_name
        submit_triggers = ['lost_focus', 'return_pressed', 'auto_sync']

    GroupBox:
        title = 'Description'

        constraints << ([vbox(fi, hbox(me, vbox(*con.items)))] if con.condition
                        else [vbox(fi, hbox(me, spacer))])

        MultilineField: fi:
            hug_height = 'weak'
            read_only = True
            text << model.template_doc
        CheckBox: me:
            text = 'Merge'
            checked := model.merge
            enabled << bool(model.root.context)
            tool_tip << (fill(cleandoc('''Should the template be inserted as a
                sequence and forget it is a template.''')) if enabled else 
                fill(cleandoc('''To merge you should first select a 
                                 context.''')))
        Conditional: con:
            condition << not bool(model.root.context)
            Label:
                text = "To merge you must select a context."
            PushButton:
                text = 'Select context'
                clicked ::
                    core = model.manager.workbench.get_plugin(
                                                        'enaml.workbench.core')
                    cmd = 'ecpy.pulses.build_context'
                    core.invoke_command(cmd, {'root': model.root,
                                              'parent_ui': self})
    Conditional:
        condition << model.merge

        RadioButton:
            text = 'Insert template_vars in root'
            checked := model.t_vars_as_root

        RadioButton:
            text = 'Keep template_vars as local avrs'

        MappingEditor:
            context = model.context
            root = model.root
