# -*- coding: utf-8 -*-
# -----------------------------------------------------------------------------
# Copyright 2015-2018 by ExopyPulses Authors, see AUTHORS for more details.
#
# Distributed under the terms of the BSD license.
#
# The full license is in the file LICENCE, distributed with this software.
# -----------------------------------------------------------------------------
"""Sequence editor similar to the task editor used to add/move/remove items.

"""
from itertools import chain
from functools import partial

from atom.api import (Atom, Typed, Str, Constant, Bool, Value, Dict,
                      Subclass, set_default)
from enaml.core.declarative import d_, d_func
from enaml.layout.api import vbox, hbox, align, spacer
from enaml.widgets.api import (PushButton, Container, Label, Field,
                               GroupBox, ScrollArea, Menu, Action, Stack,
                               StackItem)
from enaml.core.api import Conditional
from exopy.utils.container_change import ContainerChange

from ...utils.entry_eval import EVALUATER_TOOLTIP
from ...pulse import Pulse
from ..base_sequences import AbstractSequence
from .abstract_sequence_view import AbstractSequenceView

#: TODO A Nice thing wold be to make the stock exopy popuplistmenu more flexible.
#: For the time beeing, this will suffice.
enamldef PopupListMenu(Menu):
    """Popup menu used to alter add, delete or move elements in the list.

    """
    #: Reference to the list being edited.
    attr model

    #: Index of the element being edited.
    attr index : int

    #: Dict mapping operation to function to use to perform it.
    #: Possible entries are:
    #: - 'add' : function to add an entry, receive index and 'before'/'after'
    #: - 'remove' : function to remove an entry, receive the index and new pos.
    #: - 'move' : function move an element receive the index and the new index.
    attr operations : dict

    Conditional:
        condition = bool('addP' in operations or 'addS' in operations)
        Menu:
            title = 'Add before'
            Action:
                text = 'Pulse'
                visible = 'addP' in operations
                triggered ::
                    operations['addP'](index, 'before')
            Action:
                text = 'Sequence'
                visible = 'addS' in operations
                triggered ::
                    operations['addS'](index, 'before')
        Menu:
            title = 'Add after'
            Action:
                text = 'Pulse'
                visible = 'addP' in operations
                triggered ::
                    operations['addP'](index, 'after')
            Action:
                text = 'Sequence'
                visible = 'addS' in operations
                triggered ::
                    operations['addS'](index, 'after')
        Action:
            separator = True

    Action:
        visible = 'remove' in operations
        text = 'Delete'
        triggered :: operations['remove'](index)
    Action:
        separator = True

    Action:
        visible = 'move' in operations and index != 0
        text = 'Move to top'
        triggered ::
            operations['move'](index, 0)
    Action:
        visible = 'move' in operations and index != 0
        text = 'Move up'
        triggered ::
            operations['move'](index, index - 1)
    Action:
        visible = 'move' in operations and index != len(model)-1
        text = 'Move down'
        triggered ::
            operations['move'](index, index + 1)
    Action:
        visible = 'move' in operations and index != len(model)-1
        text = 'Move to bottom'
        triggered ::
            operations['move'](index, len(model))


enamldef ItemEditorButton(PushButton):
    """A push button displayed on the right of an item in the editor.

    This button generates a popup menu which is used to add, move and remove
    task directly from the editor.

    """
    #: Refrence to the task this button is linked to.
    attr item

    #: Reference to the editor.
    attr editor

    visible << bool(editor.operations)

    clicked::
        items = editor.sequence.items
        if editor.operations:
            popup = PopupListMenu(model=items, index=items.index(item),
                                  operations=editor.operations)
            popup.popup()

    constraints = [width == 15, height == 20]
    font = 'bold 12pt Consolas'
    text = '>'


enamldef EmptyEditorButtons(Container): view:
    """Button displayed when the edited list of items is empty.

    """
    #: Reference to the SequenceEditor using this button
    attr editor

    constraints = [hbox(pul, seq), pul.width == seq.width]

    PushButton: pul:
        text = "Add Pulse"
        clicked ::
            editor.sequence.add_child_item(0, Pulse())

    PushButton: seq:
        text = 'Add Sequence'
        clicked ::
            obj = editor.root.create_new_sequence()
            if obj:
                editor.sequence.add_child_item(0, obj)


class SequenceEditor(Container):
    """ A custom container to edit the items of a sequence.

    """
    #: Reference to the sequence that we are editing
    sequence = d_(Typed(AbstractSequence))

    #: Dictionary of operations used by to alter the children member list.
    operations = d_(Constant())

    #: Reference to the root view.
    root = d_(Typed(AbstractSequenceView))

    padding = set_default(2)

    @d_func
    def refresh(self):
        """Ensure that all child views are visible and correctly parented.

        """
        self._no_relayout = True
        for _, view in self._children_buttons.values():
            view.set_parent(self)
            view.refresh()
        self._no_relayout = False
        if not self._no_relayout:
            self.request_relayout()

    @d_func
    def layout_constraints(self):
        """Build the constraints based on the children member order.

        """
        items = self.sequence.items
        if items:
            children = self._children_buttons
            rows = [hbox(children[o][0], children[o][1])
                    for o in items]
            return [vbox(*rows)] + [align('top', *children[o]) for o in items]
        elif 'addP' in self.operations:
            return [vbox(self._empty_button)]
        else:
            return []

    def initialize(self):
        """Overridden initializer to setup member observers.

        """
        # Populate the container.
        self._populate()
        super(SequenceEditor, self).initialize()
        self.sequence.observe('items', self._update_views)
        self.sequence.observe('items_changed', self._update_views)


    def destroy(self):
        """Overriden destroyer to remove observers.

        """
        self.sequence.unobserve('items', self._update_views)
        self.sequence.unobserve('items_changed', self._update_views)
        super(SequenceEditor, self).destroy()

    # =========================================================================
    # --- Private API ---------------------------------------------------------
    # =========================================================================

    #: Dictionary mappping the tasks found in the children member to the pair
    #: button view used to edit them.
    _children_buttons = Dict()

    #: Flag preventing relayout. Used to avoid multiple relayouts during
    #: refreshing
    _no_relayout = Bool()

    #: Push button used when no item exists.
    _empty_button = Typed(EmptyEditorButtons)

    def _populate(self):
        """Populate the container based on the children member.

        """
        items = self.sequence.items
        if items:
            for item in items:
                button = ItemEditorButton(item=item, editor=self)
                view = self.root.view_for(item)
                self._children_buttons[item] = (button, view)

            self.insert_children(None, chain(*self._children_buttons.values()))

        elif 'addP' in self.operations:
            self._empty_button.set_parent(self)
            self._empty_button.show()

    def _post_setattr_sequence(self, old, new):
        """Update the views each time the items change.

        """
        old.unobserve('items', self._update_views)
        old.unobserve('items_changed', self._update_views)
        self._update_views(None)
        new.observe('items', self._update_views)
        new.observe('items_changed', self._update_views)

    def _update_views(self, change, is_root_call=True):
        """Handler updating as needed the views when the children member is
        updated.

        Parameters
        ----------
        change : dict or `ContainerChange`
            Payload of the received notification.

        root : bool, optional
            Flag indicating whether or not this is the root call or a recursive
            one.

        """
        if isinstance(change, ContainerChange):

            obj = change.obj
            name = change.name

            if change.collapsed:
                for ch in change.collapsed:
                    self._update_views(ch, False)

            elif change.added:

                # Add all of the children that were added:
                for index, child in change.added:
                    button = ItemEditorButton(item=child, editor=self)
                    view = self.root.view_for(child)
                    self._children_buttons[child] = (button, view)
                    button.set_parent(self)
                    view.set_parent(self)
                    if self.operations:
                        button.show()
                    view.show()

            elif change.removed:
                # Remove all of the children that were deleted:
                for _, item in change.removed:
                    self._remove_view(item)

            elif change.moved and is_root_call:
                # Simply need to relayout.
                self.request_relayout()

            # Make sure the _empty_button is correctly parented.
            if self._children_buttons:
                self._empty_button.set_parent(None)
            elif 'addP' in self.operations:
                self._empty_button.set_parent(self)
                self._empty_button.show()

        else:
            # The whole member was replaced so we can just forget about its
            # previous state. This should be a rare event.

            # First we destroy all the buttons and views (not worth optimizing
            # more).
            for b, w in self._children_buttons.values():
                b.destroy()
                self.root.discard_view(w.item)

            self._empty_button.set_parent(None)

            # Next we repopulate the container.
            self._populate()


    def _remove_view(self, item):
        """Remove the view associated with a item.

        """
        button, view = self._children_buttons.pop(item)
        button.destroy()
        self.root.discard_view(item)

    def _default_operations(self):
        """Build the operations dictionary used by the popup menu.

        """
        def addP(index, position):
            """Handler for the add entry of the menu.

            """
            pulse = Pulse()
            if pulse:
                if position == 'after':
                    index += 1
                self.sequence.add_child_item(index, pulse)

        def addS(index, position):
            """Handler for the add entry of the menu.

            """
            obj = self.root.create_new_sequence()
            if obj:
                if obj:
                    if position == 'after':
                        index += 1
                    self.sequence.add_child_item(index, obj)

        def move(old, new):
            """Handler for the move entries of the menu.

            """
            self.sequence.move_child_item(old, new)

        def remove(index):
            """Handler for the remove entry of the menu.

            """
            self.sequence.remove_child_item(index)

        return {'addP': addP, 'addS': addS,
                'move': move, 'remove': remove}

    def _default__empty_button(self):
        """Button used to add the fist item.
        """
        return EmptyEditorButtons(editor=self)


enamldef FoldableSequenceEditor(Container):
    """Sequence editor which can be masked.

    """
    #: Direct access to the sequence of the underlying editor.
    alias sequence: editor.sequence

    #: Reference to the root view.
    alias root : editor.root

    #: Reference to the dictionary with allowed operations.
    alias operations : editor.operations

    func refresh():
        if stack.index == 0:
            editor.refresh()

    padding = 0

    PushButton:
        text = '-'
        constraints = [height == 10]
        clicked ::
            ind = int(not stack.index)
            stack.index = ind
            self.text = '+' if ind else '-'

    Stack: stack:
        size_hint_mode = 'current'

        StackItem:
            SequenceEditor: editor:
                name = 'sequence_editor'

        StackItem:
            Container:
                padding = 2
                Label:
                    text = 'Folded'
